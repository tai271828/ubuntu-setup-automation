#!/usr/bin/env python3
import time
import libvirt
from libvirt import libvirtError
xmlconfig = """
<domain type='kvm' id='1'>
    <name>ubuntu-16.04.1-desktop-unattended</name>
    <memory unit='KiB'>1048576</memory>
    <currentMemory unit='KiB'>1048576</currentMemory>
    <vcpu placement='static'>1</vcpu>
    <resource>
        <partition>/machine</partition>
    </resource>
    <os>
        <type arch='x86_64' machine='pc-i440fx-trusty'>hvm</type>
        <boot dev='hd'/>
        <boot dev='cdrom'/>
    </os>
    <features>
        <acpi/>
        <apic/>
        <pae/>
    </features>
    <clock offset='utc'/>
    <on_poweroff>destroy</on_poweroff>
    <on_reboot>restart</on_reboot>
    <on_crash>restart</on_crash>
    <devices>
        <emulator>/usr/bin/qemu-system-x86_64</emulator>
        <disk type='file' device='disk'>
            <driver name='qemu' type='raw'/>
            <source file='/var/lib/libvirt/images/ubuntu-16.04.1-desktop-amd64-unattended.qcow2'/>
            <backingStore/>
            <target dev='vda' bus='virtio'/>
            <address type='pci' domain='0x0000' bus='0x00' slot='0x07' function='0x0'/>
        </disk>
        <disk type='file' device='cdrom'>
            <driver name='qemu' type='raw'/>
            <source file='/var/lib/libvirt/images/my-seed.img'/>
            <backingStore/>
            <target dev='hdb' bus='ide'/>
            <address type='drive' controller='0' bus='0' target='0' unit='1'/>
            <on_reboot>destroy</on_reboot>
        </disk>
        <disk type='file' device='cdrom'>
            <driver name='qemu' type='raw'/>
            <source file='/var/lib/libvirt/images/ubuntu-16.04.1-desktop-amd64-unattended.iso'/>
            <backingStore/>
            <target dev='hda' bus='ide'/>
            <alias name='ide0-0-0'/>
            <address type='drive' controller='0' bus='0' target='0' unit='0'/>
            <on_reboot>destroy</on_reboot>
        </disk>
        <controller type='usb' index='0'>
            <alias name='usb'/>
            <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x2'/>
        </controller>
        <controller type='pci' index='0' model='pci-root'>
            <alias name='pci.0'/>
        </controller>
        <controller type='ide' index='0'>
            <alias name='ide'/>
            <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x1'/>
        </controller>
        <interface type='network'>
            <mac address='52:54:00:da:02:01'/>
            <source network='default'/>
            <target dev='vnet0'/>
            <model type='virtio'/>
            <alias name='net0'/>
            <address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x0'/>
        </interface>
        <serial type='pty'>
            <source path='/dev/pts/5'/>
            <target port='0'/>
            <alias name='serial0'/>
        </serial>
        <console type='pty' tty='/dev/pts/5'>
            <source path='/dev/pts/5'/>
            <target type='serial' port='0'/>
            <alias name='serial0'/>
        </console>
        <input type='mouse' bus='ps2'/>
        <input type='keyboard' bus='ps2'/>
        <graphics type='vnc' port='5900' autoport='yes' listen='0.0.0.0'>
            <listen type='address' address='0.0.0.0'/>
        </graphics>
        <video>
            <model type='cirrus' vram='16384' heads='1'/>
            <alias name='video0'/>
            <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x0'/>
        </video>
        <memballoon model='virtio'>
            <alias name='balloon0'/>
            <address type='pci' domain='0x0000' bus='0x00' slot='0x04' function='0x0'/>
        </memballoon>
        <channel type='unix'>
           <source mode='bind' path='/var/lib/libvirt/qemu/f16x86_64.agent'/>
           <target type='virtio' name='org.qemu.guest_agent.0'/>
        </channel>
    </devices>
</domain>
"""

conn = libvirt.open('qemu:///system')
if conn == None:
    print("CRITICAL: Failed to connect to the hypervizor")

instance = conn.defineXML(xmlconfig)
if instance == None:
    print("CRITICAL: Failed to define the instance")

instances = conn.listDefinedDomains()
print('Defined instances: {}'.format(instances))
instance.create()
print("Creating a domain instance.")
print("Created a domain instance.")

print("Try to get the ethernet IP of the guest os")

count_timeout = 54
count = 1
while (count < count_timeout + 1):
    try:
        ins_ifa = instance.interfaceAddresses
        iface_addrs = ins_ifa(libvirt.VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_AGENT, 0)
        break
    except libvirtError:
        if count == count_timeout - 1:
            print("Too many tries. Give up.")
        else:
            print("The system is not ready. Waiting againt.")
    uptime = 10 # sec
    print("Wait for the provision of the system for %i seconds ( %i / %i ) " % (uptime, count, count_timeout))
    time.sleep(uptime)
    count += 1

guest_addrs = []
for info in iface_addrs['ens3']['addrs']:
    if info.get('type') == 0:
        guest_addrs.append(info.get('addr'))
# pick up one as a default
guest_ip = guest_addrs[0]
print("The guest IP is %s" % guest_addrs)

if instance.isActive():
    input("Press Enter to finish running and destroy this domain.")
else:
    print("No domain instance is activated.")

instance.destroy()

while instance.isActive():
    print('The domain instance is still alive. Waiting for terminating.')
print('Destroyed the domain instance.')

instance.undefine()
instances = conn.listDefinedDomains()
#print('Defined instances: {}'.format(instances))

conn.close()
